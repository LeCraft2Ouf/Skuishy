import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group = "lol.aabss"
version = "2.8.1"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = "https://repo.papermc.io/repository/maven-public/" }
    maven { url = "https://repo.skriptlang.org/releases" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT"
    implementation "net.kyori:adventure-text-minimessage:4.15.0"
    compileOnly("com.github.SkriptLang:Skript:2.9.5") {
        transitive = false
    }
    compileOnly "com.github.decentsoftware-eu:decentholograms:2.8.8"
    compileOnly files("libs/VulcanAPI.jar")
    implementation("com.github.SkriptLang:skript-reflect:2.4-dev1")
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
}

build {
    dependsOn(shadowJar)
    tasks.withType(JavaCompile).tap {
        configureEach {
            // Supprime tous les warnings Java
            options.compilerArgs.add("-nowarn")
        }
    }
}

shadowJar {
    archiveClassifier = ""
}

def oldestJava = 17
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-source', '' + oldestJava, '-target', '' + oldestJava]
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
    filesMatching("lang/default.lang") {
        expand props
    }
    from("lang") {
        include "**/*"
        into "lang/"
    }
    filesNotMatching("**/*.png") {
        filter ReplaceTokens, tokens: ["version": project.version]
    }
}
